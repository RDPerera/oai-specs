// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# This is the public Twilio REST API.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.twilio.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Retrieves a collection of Accounts belonging to the account used to make the request
    #
    # + friendlyName - Only return the Account resources with friendly names that exactly match this name.
    # + status - Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAccount(string? friendlyName = (), Account_enum_status? status = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAccountResponse|error {
        string resourcePath = string `/2010-04-01/Accounts.json`;
        map<anydata> queryParam = {"FriendlyName": friendlyName, "Status": status, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAccountResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new Twilio Subaccount from the account making the request
    #
    # + return - Created 
    remote isolated function createAccount(CreateAccountRequest payload) returns Account|error {
        string resourcePath = string `/2010-04-01/Accounts.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Account response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch the account specified by the provided Account Sid
    #
    # + sid - The Account Sid that uniquely identifies the account to fetch
    # + return - OK 
    remote isolated function fetchAccount(string sid) returns Account|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(sid)}.json`;
        Account response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Modify the properties of a given Account
    #
    # + sid - The Account Sid that uniquely identifies the account to update
    # + return - OK 
    remote isolated function updateAccount(string sid, UpdateAccountRequest payload) returns Account|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Account response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # + customerName - The `customer_name` of the Address resources to read.
    # + friendlyName - The string that identifies the Address resources to read.
    # + isoCountry - The ISO country code of the Address resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAddress(string accountSid, string? customerName = (), string? friendlyName = (), string? isoCountry = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAddressResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses.json`;
        map<anydata> queryParam = {"CustomerName": customerName, "FriendlyName": friendlyName, "IsoCountry": isoCountry, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAddressResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # + return - Created 
    remote isolated function createAddress(string accountSid, CreateAddressRequest payload) returns Address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Address response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # + return - OK 
    remote isolated function fetchAddress(string accountSid, string sid) returns Address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses/${getEncodedUri(sid)}.json`;
        Address response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # + sid - The Twilio-provided string that uniquely identifies the Address resource to update.
    # + return - OK 
    remote isolated function updateAddress(string accountSid, string sid, UpdateAddressRequest payload) returns Address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Address response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Address resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteAddress(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of applications representing an application within the requesting account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # + friendlyName - The string that identifies the Application resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listApplication(string accountSid, string? friendlyName = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListApplicationResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Applications.json`;
        map<anydata> queryParam = {"FriendlyName": friendlyName, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListApplicationResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new application within your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createApplication(string accountSid, CreateApplicationRequest payload) returns Application|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Applications.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Application response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch the application specified by the provided sid
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # + return - OK 
    remote isolated function fetchApplication(string accountSid, string sid) returns Application|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Applications/${getEncodedUri(sid)}.json`;
        Application response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates the application's properties
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # + sid - The Twilio-provided string that uniquely identifies the Application resource to update.
    # + return - OK 
    remote isolated function updateApplication(string accountSid, string sid, UpdateApplicationRequest payload) returns Application|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Applications/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Application response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete the application by the specified application sid
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Application resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteApplication(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Applications/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Fetch an instance of an authorized-connect-app
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
    # + connectAppSid - The SID of the Connect App to fetch.
    # + return - OK 
    remote isolated function fetchAuthorizedConnectApp(string accountSid, string connectAppSid) returns Authorized_connect_app|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AuthorizedConnectApps/${getEncodedUri(connectAppSid)}.json`;
        Authorized_connect_app response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of authorized-connect-apps belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAuthorizedConnectApp(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAuthorizedConnectAppResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AuthorizedConnectApps.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAuthorizedConnectAppResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberCountry(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberCountryResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberCountryResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.
    # + return - OK 
    remote isolated function fetchAvailablePhoneNumberCountry(string accountSid, string countryCode) returns Available_phone_number_country|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}.json`;
        Available_phone_number_country response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberLocal(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberLocalResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/Local.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberLocalResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberMachineToMachine(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberMachineToMachineResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/MachineToMachine.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberMachineToMachineResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberMobile(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberMobileResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/Mobile.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberMobileResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberNational(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberNationalResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/National.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberNationalResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberSharedCost(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberSharedCostResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/SharedCost.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberSharedCostResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberTollFree(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberTollFreeResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/TollFree.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberTollFreeResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # + countryCode - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # + areaCode - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # + contains - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # + smsEnabled - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # + mmsEnabled - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # + voiceEnabled - Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # + excludeAllAddressRequired - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeLocalAddressRequired - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + excludeForeignAddressRequired - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # + beta - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + nearNumber - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # + nearLatLong - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # + distance - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # + inPostalCode - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # + inRegion - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # + inRateCenter - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # + inLata - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # + inLocality - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # + faxEnabled - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listAvailablePhoneNumberVoip(string accountSid, string countryCode, int? areaCode = (), string? contains = (), boolean? smsEnabled = (), boolean? mmsEnabled = (), boolean? voiceEnabled = (), boolean? excludeAllAddressRequired = (), boolean? excludeLocalAddressRequired = (), boolean? excludeForeignAddressRequired = (), boolean? beta = (), string? nearNumber = (), string? nearLatLong = (), int? distance = (), string? inPostalCode = (), string? inRegion = (), string? inRateCenter = (), string? inLata = (), string? inLocality = (), boolean? faxEnabled = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListAvailablePhoneNumberVoipResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/AvailablePhoneNumbers/${getEncodedUri(countryCode)}/Voip.json`;
        map<anydata> queryParam = {"AreaCode": areaCode, "Contains": contains, "SmsEnabled": smsEnabled, "MmsEnabled": mmsEnabled, "VoiceEnabled": voiceEnabled, "ExcludeAllAddressRequired": excludeAllAddressRequired, "ExcludeLocalAddressRequired": excludeLocalAddressRequired, "ExcludeForeignAddressRequired": excludeForeignAddressRequired, "Beta": beta, "NearNumber": nearNumber, "NearLatLong": nearLatLong, "Distance": distance, "InPostalCode": inPostalCode, "InRegion": inRegion, "InRateCenter": inRateCenter, "InLata": inLata, "InLocality": inLocality, "FaxEnabled": faxEnabled, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListAvailablePhoneNumberVoipResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
    #
    # + accountSid - The unique SID identifier of the Account.
    # + return - OK 
    remote isolated function fetchBalance(string accountSid) returns Balance|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Balance.json`;
        Balance response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieves a collection of calls made to and from your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # + to - Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # + 'from - Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # + parentCallSid - Only include calls spawned by calls with this SID.
    # + status - The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # + startTime - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # + startedOnOrBefore - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # + startedOnOrAfter - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # + endTime - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # + endedOnOrBefore - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # + endedOnOrAfter - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listCall(string accountSid, string? to = (), string? 'from = (), string? parentCallSid = (), Call_enum_status? status = (), string? startTime = (), string? startedOnOrBefore = (), string? startedOnOrAfter = (), string? endTime = (), string? endedOnOrBefore = (), string? endedOnOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListCallResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls.json`;
        map<anydata> queryParam = {"To": to, "From": 'from, "ParentCallSid": parentCallSid, "Status": status, "StartTime": startTime, "startedOnOrBefore": startedOnOrBefore, "startedOnOrAfter": startedOnOrAfter, "EndTime": endTime, "endedOnOrBefore": endedOnOrBefore, "endedOnOrAfter": endedOnOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListCallResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createCall(string accountSid, CreateCallRequest payload) returns Call|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Call response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch the call specified by the provided Call SID
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # + sid - The SID of the Call resource to fetch.
    # + return - OK 
    remote isolated function fetchCall(string accountSid, string sid) returns Call|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(sid)}.json`;
        Call response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Initiates a call redirect or terminates a call
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # + sid - The Twilio-provided string that uniquely identifies the Call resource to update
    # + return - OK 
    remote isolated function updateCall(string accountSid, string sid, UpdateCallRequest payload) returns Call|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Call response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # + sid - The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # + return - The resource was deleted successfully. 
    remote isolated function deleteCall(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of all events for a call.
    #
    # + accountSid - The unique SID identifier of the Account.
    # + callSid - The unique SID identifier of the Call.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listCallEvent(string accountSid, string callSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListCallEventResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Events.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListCallEventResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch a Feedback resource from a call
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + callSid - The call sid that uniquely identifies the call
    # + return - OK 
    remote isolated function fetchCallFeedback(string accountSid, string callSid) returns CallCall_feedback|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Feedback.json`;
        CallCall_feedback response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a Feedback resource for a call
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + callSid - The call sid that uniquely identifies the call
    # + return - OK 
    remote isolated function updateCallFeedback(string accountSid, string callSid, UpdateCallFeedbackRequest payload) returns CallCall_feedback|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Feedback.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallCall_feedback response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Create a FeedbackSummary resource for a call
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + return - Created 
    remote isolated function createCallFeedbackSummary(string accountSid, CreateCallFeedbackSummaryRequest payload) returns CallCall_feedback_summary|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/FeedbackSummary.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallCall_feedback_summary response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a FeedbackSummary resource from a call
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + sid - A 34 character string that uniquely identifies this resource.
    # + return - OK 
    remote isolated function fetchCallFeedbackSummary(string accountSid, string sid) returns CallCall_feedback_summary|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/FeedbackSummary/${getEncodedUri(sid)}.json`;
        CallCall_feedback_summary response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a FeedbackSummary resource from a call
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + sid - A 34 character string that uniquely identifies this resource.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteCallFeedbackSummary(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/FeedbackSummary/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # + return - OK 
    remote isolated function fetchCallNotification(string accountSid, string callSid, string sid) returns CallCall_notificationInstance|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Notifications/${getEncodedUri(sid)}.json`;
        CallCall_notificationInstance response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # + log - Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # + messageDate - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + loggedAtOrBefore - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + loggedAtOrAfter - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listCallNotification(string accountSid, string callSid, int? log = (), string? messageDate = (), string? loggedAtOrBefore = (), string? loggedAtOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListCallNotificationResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Notifications.json`;
        map<anydata> queryParam = {"Log": log, "MessageDate": messageDate, "loggedAtOrBefore": loggedAtOrBefore, "loggedAtOrAfter": loggedAtOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListCallNotificationResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of recordings belonging to the call used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # + dateCreated - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + dateCreatedOnOrBefore - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + dateCreatedOnOrAfter - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listCallRecording(string accountSid, string callSid, string? dateCreated = (), string? dateCreatedOnOrBefore = (), string? dateCreatedOnOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListCallRecordingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Recordings.json`;
        map<anydata> queryParam = {"DateCreated": dateCreated, "dateCreatedOnOrBefore": dateCreatedOnOrBefore, "dateCreatedOnOrAfter": dateCreatedOnOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListCallRecordingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a recording for the call
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # + return - Created 
    remote isolated function createCallRecording(string accountSid, string callSid, CreateCallRecordingRequest payload) returns CallCall_recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Recordings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallCall_recording response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a recording for a call
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # + return - OK 
    remote isolated function fetchCallRecording(string accountSid, string callSid, string sid) returns CallCall_recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Recordings/${getEncodedUri(sid)}.json`;
        CallCall_recording response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # + sid - The Twilio-provided string that uniquely identifies the Recording resource to update.
    # + return - OK 
    remote isolated function updateCallRecording(string accountSid, string callSid, string sid, UpdateCallRecordingRequest payload) returns CallCall_recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Recordings/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallCall_recording response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a recording from your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteCallRecording(string accountSid, string callSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Recordings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Fetch an instance of a conference
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # + return - OK 
    remote isolated function fetchConference(string accountSid, string sid) returns Conference|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(sid)}.json`;
        Conference response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # + sid - The Twilio-provided string that uniquely identifies the Conference resource to update
    # + return - OK 
    remote isolated function updateConference(string accountSid, string sid, UpdateConferenceRequest payload) returns Conference|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Conference response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieve a list of conferences belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # + dateCreated - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # + dateCreatedOnOrBefore - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # + dateCreatedOnOrAfter - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # + dateUpdated - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # + dateUpdatedOnOrBefore - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # + dateUpdatedOnOrAfter - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # + friendlyName - The string that identifies the Conference resources to read.
    # + status - The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listConference(string accountSid, string? dateCreated = (), string? dateCreatedOnOrBefore = (), string? dateCreatedOnOrAfter = (), string? dateUpdated = (), string? dateUpdatedOnOrBefore = (), string? dateUpdatedOnOrAfter = (), string? friendlyName = (), Conference_enum_status? status = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListConferenceResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences.json`;
        map<anydata> queryParam = {"DateCreated": dateCreated, "dateCreatedOnOrBefore": dateCreatedOnOrBefore, "dateCreatedOnOrAfter": dateCreatedOnOrAfter, "DateUpdated": dateUpdated, "dateUpdatedOnOrBefore": dateUpdatedOnOrBefore, "dateUpdatedOnOrAfter": dateUpdatedOnOrAfter, "FriendlyName": friendlyName, "Status": status, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListConferenceResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an instance of a recording for a call
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # + conferenceSid - The Conference SID that identifies the conference associated with the recording to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # + return - OK 
    remote isolated function fetchConferenceRecording(string accountSid, string conferenceSid, string sid) returns ConferenceConference_recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Recordings/${getEncodedUri(sid)}.json`;
        ConferenceConference_recording response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # + conferenceSid - The Conference SID that identifies the conference associated with the recording to update.
    # + sid - The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # + return - OK 
    remote isolated function updateConferenceRecording(string accountSid, string conferenceSid, string sid, UpdateConferenceRecordingRequest payload) returns ConferenceConference_recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Recordings/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        ConferenceConference_recording response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a recording from your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # + conferenceSid - The Conference SID that identifies the conference associated with the recording to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteConferenceRecording(string accountSid, string conferenceSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Recordings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of recordings belonging to the call used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # + conferenceSid - The Conference SID that identifies the conference associated with the recording to read.
    # + dateCreated - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + dateCreatedOnOrBefore - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + dateCreatedOnOrAfter - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listConferenceRecording(string accountSid, string conferenceSid, string? dateCreated = (), string? dateCreatedOnOrBefore = (), string? dateCreatedOnOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListConferenceRecordingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Recordings.json`;
        map<anydata> queryParam = {"DateCreated": dateCreated, "dateCreatedOnOrBefore": dateCreatedOnOrBefore, "dateCreatedOnOrAfter": dateCreatedOnOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListConferenceRecordingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an instance of a connect-app
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # + return - OK 
    remote isolated function fetchConnectApp(string accountSid, string sid) returns Connect_app|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/ConnectApps/${getEncodedUri(sid)}.json`;
        Connect_app response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a connect-app with the specified parameters
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
    # + sid - The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
    # + return - OK 
    remote isolated function updateConnectApp(string accountSid, string sid, UpdateConnectAppRequest payload) returns Connect_app|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/ConnectApps/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Connect_app response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete an instance of a connect-app
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteConnectApp(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/ConnectApps/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of connect-apps belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listConnectApp(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListConnectAppResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/ConnectApps.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListConnectAppResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # + addressSid - The SID of the Address resource associated with the phone number.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listDependentPhoneNumber(string accountSid, string addressSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListDependentPhoneNumberResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Addresses/${getEncodedUri(addressSid)}/DependentPhoneNumbers.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListDependentPhoneNumberResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an incoming-phone-number belonging to the account used to make the request.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.
    # + return - OK 
    remote isolated function fetchIncomingPhoneNumber(string accountSid, string sid) returns Incoming_phone_number|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(sid)}.json`;
        Incoming_phone_number response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update an incoming-phone-number instance.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # + sid - The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.
    # + return - OK 
    remote isolated function updateIncomingPhoneNumber(string accountSid, string sid, UpdateIncomingPhoneNumberRequest payload) returns Incoming_phone_number|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_number response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a phone-numbers belonging to the account used to make the request.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteIncomingPhoneNumber(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.
    # + beta - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + friendlyName - A string that identifies the IncomingPhoneNumber resources to read.
    # + phoneNumber - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # + origin - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumber(string accountSid, boolean? beta = (), string? friendlyName = (), string? phoneNumber = (), string? origin = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers.json`;
        map<anydata> queryParam = {"Beta": beta, "FriendlyName": friendlyName, "PhoneNumber": phoneNumber, "Origin": origin, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Purchase a phone-number for the account.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createIncomingPhoneNumber(string accountSid, CreateIncomingPhoneNumberRequest payload) returns Incoming_phone_number|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_number response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of an Add-on installation currently assigned to this Number.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # + resourceSid - The SID of the Phone Number to which the Add-on is assigned.
    # + sid - The Twilio-provided string that uniquely identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchIncomingPhoneNumberAssignedAddOn(string accountSid, string resourceSid, string sid) returns Incoming_phone_numberIncoming_phone_number_assigned_add_on|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns/${getEncodedUri(sid)}.json`;
        Incoming_phone_numberIncoming_phone_number_assigned_add_on response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Remove the assignment of an Add-on installation from the Number specified.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
    # + resourceSid - The SID of the Phone Number to which the Add-on is assigned.
    # + sid - The Twilio-provided string that uniquely identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteIncomingPhoneNumberAssignedAddOn(string accountSid, string resourceSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of Add-on installations currently assigned to this Number.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # + resourceSid - The SID of the Phone Number to which the Add-on is assigned.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumberAssignedAddOn(string accountSid, string resourceSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberAssignedAddOnResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberAssignedAddOnResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Assign an Add-on installation to the Number specified.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + resourceSid - The SID of the Phone Number to assign the Add-on.
    # + return - Created 
    remote isolated function createIncomingPhoneNumberAssignedAddOn(string accountSid, string resourceSid, CreateIncomingPhoneNumberAssignedAddOnRequest payload) returns Incoming_phone_numberIncoming_phone_number_assigned_add_on|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_numberIncoming_phone_number_assigned_add_on response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of an Extension for the Assigned Add-on.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # + resourceSid - The SID of the Phone Number to which the Add-on is assigned.
    # + assignedAddOnSid - The SID that uniquely identifies the assigned Add-on installation.
    # + sid - The Twilio-provided string that uniquely identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchIncomingPhoneNumberAssignedAddOnExtension(string accountSid, string resourceSid, string assignedAddOnSid, string sid) returns Incoming_phone_numberIncoming_phone_number_assigned_add_onIncoming_phone_number_assigned_add_on_extension|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns/${getEncodedUri(assignedAddOnSid)}/Extensions/${getEncodedUri(sid)}.json`;
        Incoming_phone_numberIncoming_phone_number_assigned_add_onIncoming_phone_number_assigned_add_on_extension response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of Extensions for the Assigned Add-on.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # + resourceSid - The SID of the Phone Number to which the Add-on is assigned.
    # + assignedAddOnSid - The SID that uniquely identifies the assigned Add-on installation.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumberAssignedAddOnExtension(string accountSid, string resourceSid, string assignedAddOnSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberAssignedAddOnExtensionResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/${getEncodedUri(resourceSid)}/AssignedAddOns/${getEncodedUri(assignedAddOnSid)}/Extensions.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberAssignedAddOnExtensionResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # + beta - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + friendlyName - A string that identifies the resources to read.
    # + phoneNumber - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # + origin - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumberLocal(string accountSid, boolean? beta = (), string? friendlyName = (), string? phoneNumber = (), string? origin = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberLocalResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/Local.json`;
        map<anydata> queryParam = {"Beta": beta, "FriendlyName": friendlyName, "PhoneNumber": phoneNumber, "Origin": origin, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberLocalResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createIncomingPhoneNumberLocal(string accountSid, CreateIncomingPhoneNumberLocalRequest payload) returns Incoming_phone_numberIncoming_phone_number_local|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/Local.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_numberIncoming_phone_number_local response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # + beta - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + friendlyName - A string that identifies the resources to read.
    # + phoneNumber - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # + origin - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumberMobile(string accountSid, boolean? beta = (), string? friendlyName = (), string? phoneNumber = (), string? origin = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberMobileResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/Mobile.json`;
        map<anydata> queryParam = {"Beta": beta, "FriendlyName": friendlyName, "PhoneNumber": phoneNumber, "Origin": origin, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberMobileResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createIncomingPhoneNumberMobile(string accountSid, CreateIncomingPhoneNumberMobileRequest payload) returns Incoming_phone_numberIncoming_phone_number_mobile|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/Mobile.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_numberIncoming_phone_number_mobile response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # + beta - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # + friendlyName - A string that identifies the resources to read.
    # + phoneNumber - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # + origin - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listIncomingPhoneNumberTollFree(string accountSid, boolean? beta = (), string? friendlyName = (), string? phoneNumber = (), string? origin = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListIncomingPhoneNumberTollFreeResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/TollFree.json`;
        map<anydata> queryParam = {"Beta": beta, "FriendlyName": friendlyName, "PhoneNumber": phoneNumber, "Origin": origin, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListIncomingPhoneNumberTollFreeResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createIncomingPhoneNumberTollFree(string accountSid, CreateIncomingPhoneNumberTollFreeRequest payload) returns Incoming_phone_numberIncoming_phone_number_toll_free|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/IncomingPhoneNumbers/TollFree.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Incoming_phone_numberIncoming_phone_number_toll_free response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Key resource to fetch.
    # + return - OK 
    remote isolated function fetchKey(string accountSid, string sid) returns Key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Keys/${getEncodedUri(sid)}.json`;
        Key response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
    # + sid - The Twilio-provided string that uniquely identifies the Key resource to update.
    # + return - OK 
    remote isolated function updateKey(string accountSid, string sid, UpdateKeyRequest payload) returns Key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Keys/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Key response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Key resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteKey(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Keys/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listKey(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListKeyResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Keys.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListKeyResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # + return - Created 
    remote isolated function createNewKey(string accountSid, CreateNewKeyRequest payload) returns New_key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Keys.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        New_key response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a single Media resource associated with a specific Message resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Media resource.
    # + messageSid - The SID of the Message resource that is associated with the Media resource.
    # + sid - The Twilio-provided string that uniquely identifies the Media resource to fetch.
    # + return - OK 
    remote isolated function fetchMedia(string accountSid, string messageSid, string sid) returns MessageMedia|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(messageSid)}/Media/${getEncodedUri(sid)}.json`;
        MessageMedia response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete the Media resource.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resource.
    # + messageSid - The SID of the Message resource that is associated with the Media resource.
    # + sid - The unique identifier of the to-be-deleted Media resource.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteMedia(string accountSid, string messageSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(messageSid)}/Media/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Read a list of Media resources associated with a specific Message resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resources.
    # + messageSid - The SID of the Message resource that is associated with the Media resources.
    # + dateCreated - Only include Media resources that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read Media that were created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read Media that were created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read Media that were created on or after midnight of this date.
    # + dateCreatedOnOrBefore - Only include Media resources that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read Media that were created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read Media that were created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read Media that were created on or after midnight of this date.
    # + dateCreatedOnOrAfter - Only include Media resources that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read Media that were created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read Media that were created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read Media that were created on or after midnight of this date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listMedia(string accountSid, string messageSid, string? dateCreated = (), string? dateCreatedOnOrBefore = (), string? dateCreatedOnOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListMediaResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(messageSid)}/Media.json`;
        map<anydata> queryParam = {"DateCreated": dateCreated, "dateCreatedOnOrBefore": dateCreatedOnOrBefore, "dateCreatedOnOrAfter": dateCreatedOnOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListMediaResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch a specific member from the queue
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # + queueSid - The SID of the Queue in which to find the members to fetch.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # + return - OK 
    remote isolated function fetchMember(string accountSid, string queueSid, string callSid) returns QueueMember|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(queueSid)}/Members/${getEncodedUri(callSid)}.json`;
        QueueMember response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # + queueSid - The SID of the Queue in which to find the members to update.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # + return - OK 
    remote isolated function updateMember(string accountSid, string queueSid, string callSid, UpdateMemberRequest payload) returns QueueMember|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(queueSid)}/Members/${getEncodedUri(callSid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        QueueMember response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieve the members of the queue
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # + queueSid - The SID of the Queue in which to find the members
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listMember(string accountSid, string queueSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListMemberResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(queueSid)}/Members.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListMemberResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of Message resources associated with a Twilio Account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resources.
    # + to - Filter by recipient. For example: Set this `to` parameter to `+15558881111` to retrieve a list of Message resources with `to` properties of `+15558881111`
    # + 'from - Filter by sender. For example: Set this `from` parameter to `+15552229999` to retrieve a list of Message resources with `from` properties of `+15552229999`
    # + dateSent - Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    # + dateSentOnOrBefore - Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    # + dateSentOnOrAfter - Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listMessage(string accountSid, string? to = (), string? 'from = (), string? dateSent = (), string? dateSentOnOrBefore = (), string? dateSentOnOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListMessageResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages.json`;
        map<anydata> queryParam = {"To": to, "From": 'from, "DateSent": dateSent, "dateSentOnOrBefore": dateSentOnOrBefore, "dateSentOnOrAfter": dateSentOnOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListMessageResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Send a message
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) creating the Message resource.
    # + return - Created 
    remote isolated function createMessage(string accountSid, CreateMessageRequest payload) returns Message|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Message response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a specific Message
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
    # + sid - The SID of the Message resource to be fetched
    # + return - OK 
    remote isolated function fetchMessage(string accountSid, string sid) returns Message|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(sid)}.json`;
        Message response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a Message resource (used to redact Message `body` text and to cancel not-yet-sent messages)
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # + sid - The SID of the Message resource to be updated
    # + return - OK 
    remote isolated function updateMessage(string accountSid, string sid, UpdateMessageRequest payload) returns Message|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Message response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Deletes a Message resource from your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
    # + sid - The SID of the Message resource you wish to delete
    # + return - The resource was deleted successfully. 
    remote isolated function deleteMessage(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Create Message Feedback to confirm a tracked user action was performed by the recipient of the associated Message
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource for which to create MessageFeedback.
    # + messageSid - The SID of the Message resource for which to create MessageFeedback.
    # + return - Created 
    remote isolated function createMessageFeedback(string accountSid, string messageSid, CreateMessageFeedbackRequest payload) returns MessageMessage_feedback|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Messages/${getEncodedUri(messageSid)}/Feedback.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        MessageMessage_feedback response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSigningKey(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSigningKeyResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SigningKeys.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSigningKeyResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new Signing Key for the account making the request.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # + return - Created 
    remote isolated function createNewSigningKey(string accountSid, CreateNewSigningKeyRequest payload) returns New_signing_key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SigningKeys.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        New_signing_key response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a notification belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Notification resource to fetch.
    # + return - OK 
    remote isolated function fetchNotification(string accountSid, string sid) returns NotificationInstance|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Notifications/${getEncodedUri(sid)}.json`;
        NotificationInstance response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of notifications belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.
    # + log - Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # + messageDate - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + loggedAtOrBefore - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + loggedAtOrAfter - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listNotification(string accountSid, int? log = (), string? messageDate = (), string? loggedAtOrBefore = (), string? loggedAtOrAfter = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListNotificationResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Notifications.json`;
        map<anydata> queryParam = {"Log": log, "MessageDate": messageDate, "loggedAtOrBefore": loggedAtOrBefore, "loggedAtOrAfter": loggedAtOrAfter, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListNotificationResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an outgoing-caller-id belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # + return - OK 
    remote isolated function fetchOutgoingCallerId(string accountSid, string sid) returns Outgoing_caller_id|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/OutgoingCallerIds/${getEncodedUri(sid)}.json`;
        Outgoing_caller_id response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates the caller-id
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # + sid - The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # + return - OK 
    remote isolated function updateOutgoingCallerId(string accountSid, string sid, UpdateOutgoingCallerIdRequest payload) returns Outgoing_caller_id|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/OutgoingCallerIds/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Outgoing_caller_id response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete the caller-id specified from the account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteOutgoingCallerId(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/OutgoingCallerIds/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # + phoneNumber - The phone number of the OutgoingCallerId resources to read.
    # + friendlyName - The string that identifies the OutgoingCallerId resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listOutgoingCallerId(string accountSid, string? phoneNumber = (), string? friendlyName = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListOutgoingCallerIdResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/OutgoingCallerIds.json`;
        map<anydata> queryParam = {"PhoneNumber": phoneNumber, "FriendlyName": friendlyName, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListOutgoingCallerIdResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # + return - Created 
    remote isolated function createValidationRequest(string accountSid, CreateValidationRequestRequest payload) returns Validation_request|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/OutgoingCallerIds.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Validation_request response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a participant
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # + conferenceSid - The SID of the conference with the participant to fetch.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # + return - OK 
    remote isolated function fetchParticipant(string accountSid, string conferenceSid, string callSid) returns ConferenceParticipant|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Participants/${getEncodedUri(callSid)}.json`;
        ConferenceParticipant response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update the properties of the participant
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # + conferenceSid - The SID of the conference with the participant to update.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # + return - OK 
    remote isolated function updateParticipant(string accountSid, string conferenceSid, string callSid, UpdateParticipantRequest payload) returns ConferenceParticipant|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Participants/${getEncodedUri(callSid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        ConferenceParticipant response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Kick a participant from a given conference
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # + conferenceSid - The SID of the conference with the participants to delete.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteParticipant(string accountSid, string conferenceSid, string callSid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Participants/${getEncodedUri(callSid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of participants belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # + conferenceSid - The SID of the conference with the participants to read.
    # + muted - Whether to return only participants that are muted. Can be: `true` or `false`.
    # + hold - Whether to return only participants that are on hold. Can be: `true` or `false`.
    # + coaching - Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listParticipant(string accountSid, string conferenceSid, boolean? muted = (), boolean? hold = (), boolean? coaching = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListParticipantResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Participants.json`;
        map<anydata> queryParam = {"Muted": muted, "Hold": hold, "Coaching": coaching, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListParticipantResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + conferenceSid - The SID of the participant's conference.
    # + return - Created 
    remote isolated function createParticipant(string accountSid, string conferenceSid, CreateParticipantRequest payload) returns ConferenceParticipant|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Conferences/${getEncodedUri(conferenceSid)}/Participants.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        ConferenceParticipant response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # create an instance of payments. This will start a new payments session
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + callSid - The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # + return - Created 
    remote isolated function createPayments(string accountSid, string callSid, CreatePaymentsRequest payload) returns CallPayments|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Payments.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallPayments response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # update an instance of payments with different phases of payment flows.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # + callSid - The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # + sid - The SID of Payments session that needs to be updated.
    # + return - Accepted 
    remote isolated function updatePayments(string accountSid, string callSid, string sid, UpdatePaymentsRequest payload) returns CallPayments|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Payments/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallPayments response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a queue identified by the QueueSid
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # + return - OK 
    remote isolated function fetchQueue(string accountSid, string sid) returns Queue|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(sid)}.json`;
        Queue response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update the queue with the new parameters
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # + sid - The Twilio-provided string that uniquely identifies the Queue resource to update
    # + return - OK 
    remote isolated function updateQueue(string accountSid, string sid, UpdateQueueRequest payload) returns Queue|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Queue response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Remove an empty queue
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Queue resource to delete
    # + return - The resource was deleted successfully. 
    remote isolated function deleteQueue(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of queues belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listQueue(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListQueueResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListQueueResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a queue
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createQueue(string accountSid, CreateQueueRequest payload) returns Queue|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Queues.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Queue response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a recording
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # + includeSoftDeleted - A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # + return - OK 
    remote isolated function fetchRecording(string accountSid, string sid, boolean? includeSoftDeleted = ()) returns Recording|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(sid)}.json`;
        map<anydata> queryParam = {"IncludeSoftDeleted": includeSoftDeleted};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Recording response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a recording from your account
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteRecording(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of recordings belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # + dateCreated - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # + dateCreatedOnOrBefore - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # + dateCreatedOnOrAfter - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # + callSid - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # + conferenceSid - The Conference SID that identifies the conference associated with the recording to read.
    # + includeSoftDeleted - A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listRecording(string accountSid, string? dateCreated = (), string? dateCreatedOnOrBefore = (), string? dateCreatedOnOrAfter = (), string? callSid = (), string? conferenceSid = (), boolean? includeSoftDeleted = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListRecordingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings.json`;
        map<anydata> queryParam = {"DateCreated": dateCreated, "dateCreatedOnOrBefore": dateCreatedOnOrBefore, "dateCreatedOnOrAfter": dateCreatedOnOrAfter, "CallSid": callSid, "ConferenceSid": conferenceSid, "IncludeSoftDeleted": includeSoftDeleted, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListRecordingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an instance of an AddOnResult
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # + referenceSid - The SID of the recording to which the result to fetch belongs.
    # + sid - The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # + return - OK 
    remote isolated function fetchRecordingAddOnResult(string accountSid, string referenceSid, string sid) returns RecordingRecording_add_on_result|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults/${getEncodedUri(sid)}.json`;
        RecordingRecording_add_on_result response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a result and purge all associated Payloads
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # + referenceSid - The SID of the recording to which the result to delete belongs.
    # + sid - The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteRecordingAddOnResult(string accountSid, string referenceSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of results belonging to the recording
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # + referenceSid - The SID of the recording to which the result to read belongs.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listRecordingAddOnResult(string accountSid, string referenceSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListRecordingAddOnResultResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListRecordingAddOnResultResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an instance of a result payload
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # + referenceSid - The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # + addOnResultSid - The SID of the AddOnResult to which the payload to fetch belongs.
    # + sid - The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # + return - OK 
    remote isolated function fetchRecordingAddOnResultPayload(string accountSid, string referenceSid, string addOnResultSid, string sid) returns RecordingRecording_add_on_resultRecording_add_on_result_payload|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults/${getEncodedUri(addOnResultSid)}/Payloads/${getEncodedUri(sid)}.json`;
        RecordingRecording_add_on_resultRecording_add_on_result_payload response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a payload from the result along with all associated Data
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # + referenceSid - The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # + addOnResultSid - The SID of the AddOnResult to which the payloads to delete belongs.
    # + sid - The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteRecordingAddOnResultPayload(string accountSid, string referenceSid, string addOnResultSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults/${getEncodedUri(addOnResultSid)}/Payloads/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of payloads belonging to the AddOnResult
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # + referenceSid - The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # + addOnResultSid - The SID of the AddOnResult to which the payloads to read belongs.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listRecordingAddOnResultPayload(string accountSid, string referenceSid, string addOnResultSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListRecordingAddOnResultPayloadResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(referenceSid)}/AddOnResults/${getEncodedUri(addOnResultSid)}/Payloads.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListRecordingAddOnResultPayloadResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # + recordingSid - The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # + return - OK 
    remote isolated function fetchRecordingTranscription(string accountSid, string recordingSid, string sid) returns RecordingRecording_transcription|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(recordingSid)}/Transcriptions/${getEncodedUri(sid)}.json`;
        RecordingRecording_transcription response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # + recordingSid - The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteRecordingTranscription(string accountSid, string recordingSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(recordingSid)}/Transcriptions/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # + recordingSid - The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listRecordingTranscription(string accountSid, string recordingSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListRecordingTranscriptionResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Recordings/${getEncodedUri(recordingSid)}/Transcriptions.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListRecordingTranscriptionResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch an instance of a short code
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
    # + return - OK 
    remote isolated function fetchShortCode(string accountSid, string sid) returns Short_code|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SMS/ShortCodes/${getEncodedUri(sid)}.json`;
        Short_code response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a short code with the following parameters
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
    # + sid - The Twilio-provided string that uniquely identifies the ShortCode resource to update
    # + return - OK 
    remote isolated function updateShortCode(string accountSid, string sid, UpdateShortCodeRequest payload) returns Short_code|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SMS/ShortCodes/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Short_code response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieve a list of short-codes belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
    # + friendlyName - The string that identifies the ShortCode resources to read.
    # + shortCode - Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listShortCode(string accountSid, string? friendlyName = (), string? shortCode = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListShortCodeResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SMS/ShortCodes.json`;
        map<anydata> queryParam = {"FriendlyName": friendlyName, "ShortCode": shortCode, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListShortCodeResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + return - OK 
    remote isolated function fetchSigningKey(string accountSid, string sid) returns Signing_key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SigningKeys/${getEncodedUri(sid)}.json`;
        Signing_key response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + return - OK 
    remote isolated function updateSigningKey(string accountSid, string sid, UpdateSigningKeyRequest payload) returns Signing_key|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SigningKeys/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Signing_key response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSigningKey(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SigningKeys/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of credential list mappings belonging to the domain used in the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # + domainSid - The SID of the SIP domain that contains the resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipAuthCallsCredentialListMapping(string accountSid, string domainSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipAuthCallsCredentialListMappingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/CredentialListMappings.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipAuthCallsCredentialListMappingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new credential list mapping resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + domainSid - The SID of the SIP domain that will contain the new resource.
    # + return - Created 
    remote isolated function createSipAuthCallsCredentialListMapping(string accountSid, string domainSid, CreateSipAuthCallsCredentialListMappingRequest payload) returns SipSip_domainSip_authSip_auth_callsSip_auth_calls_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/CredentialListMappings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domainSip_authSip_auth_callsSip_auth_calls_credential_list_mapping response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a specific instance of a credential list mapping
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # + domainSid - The SID of the SIP domain that contains the resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # + return - OK 
    remote isolated function fetchSipAuthCallsCredentialListMapping(string accountSid, string domainSid, string sid) returns SipSip_domainSip_authSip_auth_callsSip_auth_calls_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/CredentialListMappings/${getEncodedUri(sid)}.json`;
        SipSip_domainSip_authSip_auth_callsSip_auth_calls_credential_list_mapping response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a credential list mapping from the requested domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # + domainSid - The SID of the SIP domain that contains the resource to delete.
    # + sid - The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipAuthCallsCredentialListMapping(string accountSid, string domainSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/CredentialListMappings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # + domainSid - The SID of the SIP domain that contains the resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipAuthCallsIpAccessControlListMapping(string accountSid, string domainSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipAuthCallsIpAccessControlListMappingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/IpAccessControlListMappings.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipAuthCallsIpAccessControlListMappingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new IP Access Control List mapping
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + domainSid - The SID of the SIP domain that will contain the new resource.
    # + return - Created 
    remote isolated function createSipAuthCallsIpAccessControlListMapping(string accountSid, string domainSid, CreateSipAuthCallsIpAccessControlListMappingRequest payload) returns SipSip_domainSip_authSip_auth_callsSip_auth_calls_ip_access_control_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/IpAccessControlListMappings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domainSip_authSip_auth_callsSip_auth_calls_ip_access_control_list_mapping response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a specific instance of an IP Access Control List mapping
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # + domainSid - The SID of the SIP domain that contains the resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # + return - OK 
    remote isolated function fetchSipAuthCallsIpAccessControlListMapping(string accountSid, string domainSid, string sid) returns SipSip_domainSip_authSip_auth_callsSip_auth_calls_ip_access_control_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/IpAccessControlListMappings/${getEncodedUri(sid)}.json`;
        SipSip_domainSip_authSip_auth_callsSip_auth_calls_ip_access_control_list_mapping response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete an IP Access Control List mapping from the requested domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # + domainSid - The SID of the SIP domain that contains the resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipAuthCallsIpAccessControlListMapping(string accountSid, string domainSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Calls/IpAccessControlListMappings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of credential list mappings belonging to the domain used in the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # + domainSid - The SID of the SIP domain that contains the resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipAuthRegistrationsCredentialListMapping(string accountSid, string domainSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipAuthRegistrationsCredentialListMappingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Registrations/CredentialListMappings.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipAuthRegistrationsCredentialListMappingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new credential list mapping resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + domainSid - The SID of the SIP domain that will contain the new resource.
    # + return - Created 
    remote isolated function createSipAuthRegistrationsCredentialListMapping(string accountSid, string domainSid, CreateSipAuthRegistrationsCredentialListMappingRequest payload) returns SipSip_domainSip_authSip_auth_registrationsSip_auth_registrations_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Registrations/CredentialListMappings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domainSip_authSip_auth_registrationsSip_auth_registrations_credential_list_mapping response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a specific instance of a credential list mapping
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # + domainSid - The SID of the SIP domain that contains the resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # + return - OK 
    remote isolated function fetchSipAuthRegistrationsCredentialListMapping(string accountSid, string domainSid, string sid) returns SipSip_domainSip_authSip_auth_registrationsSip_auth_registrations_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Registrations/CredentialListMappings/${getEncodedUri(sid)}.json`;
        SipSip_domainSip_authSip_auth_registrationsSip_auth_registrations_credential_list_mapping response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a credential list mapping from the requested domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # + domainSid - The SID of the SIP domain that contains the resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipAuthRegistrationsCredentialListMapping(string accountSid, string domainSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/Auth/Registrations/CredentialListMappings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of credentials.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + credentialListSid - The unique id that identifies the credential list that contains the desired credentials.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipCredential(string accountSid, string credentialListSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipCredentialResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(credentialListSid)}/Credentials.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipCredentialResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new credential resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + credentialListSid - The unique id that identifies the credential list to include the created credential.
    # + return - Created 
    remote isolated function createSipCredential(string accountSid, string credentialListSid, CreateSipCredentialRequest payload) returns SipSip_credential_listSip_credential|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(credentialListSid)}/Credentials.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_credential_listSip_credential response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a single credential.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + credentialListSid - The unique id that identifies the credential list that contains the desired credential.
    # + sid - The unique id that identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchSipCredential(string accountSid, string credentialListSid, string sid) returns SipSip_credential_listSip_credential|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(credentialListSid)}/Credentials/${getEncodedUri(sid)}.json`;
        SipSip_credential_listSip_credential response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a credential resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + credentialListSid - The unique id that identifies the credential list that includes this credential.
    # + sid - The unique id that identifies the resource to update.
    # + return - OK 
    remote isolated function updateSipCredential(string accountSid, string credentialListSid, string sid, UpdateSipCredentialRequest payload) returns SipSip_credential_listSip_credential|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(credentialListSid)}/Credentials/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_credential_listSip_credential response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a credential resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + credentialListSid - The unique id that identifies the credential list that contains the desired credentials.
    # + sid - The unique id that identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipCredential(string accountSid, string credentialListSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(credentialListSid)}/Credentials/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Get All Credential Lists
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipCredentialList(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipCredentialListResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipCredentialListResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a Credential List
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + return - Created 
    remote isolated function createSipCredentialList(string accountSid, CreateSipCredentialListRequest payload) returns SipSip_credential_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_credential_list response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Get a Credential List
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + sid - The credential list Sid that uniquely identifies this resource
    # + return - OK 
    remote isolated function fetchSipCredentialList(string accountSid, string sid) returns SipSip_credential_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(sid)}.json`;
        SipSip_credential_list response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a Credential List
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + sid - The credential list Sid that uniquely identifies this resource
    # + return - OK 
    remote isolated function updateSipCredentialList(string accountSid, string sid, UpdateSipCredentialListRequest payload) returns SipSip_credential_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_credential_list response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a Credential List
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + sid - The credential list Sid that uniquely identifies this resource
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipCredentialList(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/CredentialLists/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Read multiple CredentialListMapping resources from an account.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipCredentialListMapping(string accountSid, string domainSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipCredentialListMappingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/CredentialListMappings.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipCredentialListMappingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a CredentialListMapping resource for an account.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # + return - Created 
    remote isolated function createSipCredentialListMapping(string accountSid, string domainSid, CreateSipCredentialListMappingRequest payload) returns SipSip_domainSip_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/CredentialListMappings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domainSip_credential_list_mapping response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a single CredentialListMapping resource from an account.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # + sid - A 34 character string that uniquely identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchSipCredentialListMapping(string accountSid, string domainSid, string sid) returns SipSip_domainSip_credential_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/CredentialListMappings/${getEncodedUri(sid)}.json`;
        SipSip_domainSip_credential_list_mapping response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a CredentialListMapping resource from an account.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # + sid - A 34 character string that uniquely identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipCredentialListMapping(string accountSid, string domainSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/CredentialListMappings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of domains belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipDomain(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipDomainResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipDomainResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new Domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createSipDomain(string accountSid, CreateSipDomainRequest payload) returns SipSip_domain|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domain response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a Domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # + return - OK 
    remote isolated function fetchSipDomain(string accountSid, string sid) returns SipSip_domain|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(sid)}.json`;
        SipSip_domain response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update the attributes of a domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # + sid - The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # + return - OK 
    remote isolated function updateSipDomain(string accountSid, string sid, UpdateSipDomainRequest payload) returns SipSip_domain|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domain response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete an instance of a Domain
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipDomain(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipIpAccessControlList(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipIpAccessControlListResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipIpAccessControlListResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new IpAccessControlList resource
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + return - Created 
    remote isolated function createSipIpAccessControlList(string accountSid, CreateSipIpAccessControlListRequest payload) returns SipSip_ip_access_control_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_ip_access_control_list response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch a specific instance of an IpAccessControlList
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + sid - A 34 character string that uniquely identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchSipIpAccessControlList(string accountSid, string sid) returns SipSip_ip_access_control_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(sid)}.json`;
        SipSip_ip_access_control_list response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Rename an IpAccessControlList
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + sid - A 34 character string that uniquely identifies the resource to udpate.
    # + return - OK 
    remote isolated function updateSipIpAccessControlList(string accountSid, string sid, UpdateSipIpAccessControlListRequest payload) returns SipSip_ip_access_control_list|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_ip_access_control_list response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete an IpAccessControlList from the requested account
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + sid - A 34 character string that uniquely identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipIpAccessControlList(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Fetch an IpAccessControlListMapping resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP domain.
    # + sid - A 34 character string that uniquely identifies the resource to fetch.
    # + return - OK 
    remote isolated function fetchSipIpAccessControlListMapping(string accountSid, string domainSid, string sid) returns SipSip_domainSip_ip_access_control_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/IpAccessControlListMappings/${getEncodedUri(sid)}.json`;
        SipSip_domainSip_ip_access_control_list_mapping response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete an IpAccessControlListMapping resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP domain.
    # + sid - A 34 character string that uniquely identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipIpAccessControlListMapping(string accountSid, string domainSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/IpAccessControlListMappings/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of IpAccessControlListMapping resources.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP domain.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipIpAccessControlListMapping(string accountSid, string domainSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipIpAccessControlListMappingResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/IpAccessControlListMappings.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipIpAccessControlListMappingResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new IpAccessControlListMapping resource.
    #
    # + accountSid - The unique id of the Account that is responsible for this resource.
    # + domainSid - A 34 character string that uniquely identifies the SIP domain.
    # + return - Created 
    remote isolated function createSipIpAccessControlListMapping(string accountSid, string domainSid, CreateSipIpAccessControlListMappingRequest payload) returns SipSip_domainSip_ip_access_control_list_mapping|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/Domains/${getEncodedUri(domainSid)}/IpAccessControlListMappings.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_domainSip_ip_access_control_list_mapping response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Read multiple IpAddress resources.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + ipAccessControlListSid - The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listSipIpAddress(string accountSid, string ipAccessControlListSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListSipIpAddressResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(ipAccessControlListSid)}/IpAddresses.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListSipIpAddressResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new IpAddress resource.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + ipAccessControlListSid - The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # + return - Created 
    remote isolated function createSipIpAddress(string accountSid, string ipAccessControlListSid, CreateSipIpAddressRequest payload) returns SipSip_ip_access_control_listSip_ip_address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(ipAccessControlListSid)}/IpAddresses.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_ip_access_control_listSip_ip_address response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Read one IpAddress resource.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + ipAccessControlListSid - The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # + sid - A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # + return - OK 
    remote isolated function fetchSipIpAddress(string accountSid, string ipAccessControlListSid, string sid) returns SipSip_ip_access_control_listSip_ip_address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(ipAccessControlListSid)}/IpAddresses/${getEncodedUri(sid)}.json`;
        SipSip_ip_access_control_listSip_ip_address response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update an IpAddress resource.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + ipAccessControlListSid - The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # + sid - A 34 character string that identifies the IpAddress resource to update.
    # + return - OK 
    remote isolated function updateSipIpAddress(string accountSid, string ipAccessControlListSid, string sid, UpdateSipIpAddressRequest payload) returns SipSip_ip_access_control_listSip_ip_address|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(ipAccessControlListSid)}/IpAddresses/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        SipSip_ip_access_control_listSip_ip_address response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete an IpAddress resource.
    #
    # + accountSid - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # + ipAccessControlListSid - The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # + sid - A 34 character string that uniquely identifies the resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteSipIpAddress(string accountSid, string ipAccessControlListSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/SIP/IpAccessControlLists/${getEncodedUri(ipAccessControlListSid)}/IpAddresses/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Create a Siprec
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # + return - Created 
    remote isolated function createSiprec(string accountSid, string callSid, CreateSiprecRequest payload) returns CallSiprec|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Siprec.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallSiprec response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Stop a Siprec using either the SID of the Siprec resource or the `name` used when creating the resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # + sid - The SID of the Siprec resource, or the `name` used when creating the resource
    # + return - OK 
    remote isolated function updateSiprec(string accountSid, string callSid, string sid, UpdateSiprecRequest payload) returns CallSiprec|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Siprec/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallSiprec response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Create a Stream
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # + return - Created 
    remote isolated function createStream(string accountSid, string callSid, CreateStreamRequest payload) returns CallStream|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Streams.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallStream response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Stop a Stream using either the SID of the Stream resource or the `name` used when creating the resource
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # + sid - The SID of the Stream resource, or the `name` used when creating the resource
    # + return - OK 
    remote isolated function updateStream(string accountSid, string callSid, string sid, UpdateStreamRequest payload) returns CallStream|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/Streams/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallStream response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Create a new token for ICE servers
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createToken(string accountSid, CreateTokenRequest payload) returns Token|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Tokens.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        Token response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Fetch an instance of a Transcription
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # + return - OK 
    remote isolated function fetchTranscription(string accountSid, string sid) returns Transcription|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Transcriptions/${getEncodedUri(sid)}.json`;
        Transcription response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Delete a transcription from the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteTranscription(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Transcriptions/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of transcriptions belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listTranscription(string accountSid, int? pageSize = (), int? page = (), string? pageToken = ()) returns ListTranscriptionResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Transcriptions.json`;
        map<anydata> queryParam = {"PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListTranscriptionResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a list of usage-records belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecord(string accountSid, Usage_record_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordAllTime(string accountSid, Usage_record_all_time_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordAllTimeResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/AllTime.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordAllTimeResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordDaily(string accountSid, Usage_record_daily_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordDailyResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/Daily.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordDailyResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordLastMonth(string accountSid, Usage_record_last_month_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordLastMonthResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/LastMonth.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordLastMonthResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordMonthly(string accountSid, Usage_record_monthly_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordMonthlyResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/Monthly.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordMonthlyResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordThisMonth(string accountSid, Usage_record_this_month_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordThisMonthResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/ThisMonth.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordThisMonthResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordToday(string accountSid, Usage_record_today_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordTodayResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/Today.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordTodayResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordYearly(string accountSid, Usage_record_yearly_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordYearlyResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/Yearly.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordYearlyResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # + category - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # + startDate - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # + endDate - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # + includeSubaccounts - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageRecordYesterday(string accountSid, Usage_record_yesterday_enum_category? category = (), string? startDate = (), string? endDate = (), boolean? includeSubaccounts = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageRecordYesterdayResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Records/Yesterday.json`;
        map<anydata> queryParam = {"Category": category, "StartDate": startDate, "EndDate": endDate, "IncludeSubaccounts": includeSubaccounts, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageRecordYesterdayResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Fetch and instance of a usage-trigger
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # + sid - The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # + return - OK 
    remote isolated function fetchUsageTrigger(string accountSid, string sid) returns UsageUsage_trigger|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Triggers/${getEncodedUri(sid)}.json`;
        UsageUsage_trigger response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update an instance of a usage trigger
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # + sid - The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # + return - OK 
    remote isolated function updateUsageTrigger(string accountSid, string sid, UpdateUsageTriggerRequest payload) returns UsageUsage_trigger|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Triggers/${getEncodedUri(sid)}.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        UsageUsage_trigger response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # + sid - The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteUsageTrigger(string accountSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Triggers/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve a list of usage-triggers belonging to the account used to make the request
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # + recurring - The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # + triggerBy - The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # + usageCategory - The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # + pageSize - How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # + page - The page index. This value is simply for client state.
    # + pageToken - The page token. This is provided by the API.
    # + return - OK 
    remote isolated function listUsageTrigger(string accountSid, Usage_trigger_enum_recurring? recurring = (), Usage_trigger_enum_trigger_field? triggerBy = (), Usage_trigger_enum_usage_category? usageCategory = (), int? pageSize = (), int? page = (), string? pageToken = ()) returns ListUsageTriggerResponse|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Triggers.json`;
        map<anydata> queryParam = {"Recurring": recurring, "TriggerBy": triggerBy, "UsageCategory": usageCategory, "PageSize": pageSize, "Page": page, "PageToken": pageToken};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ListUsageTriggerResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Create a new UsageTrigger
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # + return - Created 
    remote isolated function createUsageTrigger(string accountSid, CreateUsageTriggerRequest payload) returns UsageUsage_trigger|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Usage/Triggers.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        UsageUsage_trigger response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Create a new User Defined Message for the given Call SID.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # + return - Created 
    remote isolated function createUserDefinedMessage(string accountSid, string callSid, CreateUserDefinedMessageRequest payload) returns CallUser_defined_message|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/UserDefinedMessages.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallUser_defined_message response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Subscribe to User Defined Messages for a given Call SID.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # + return - Created 
    remote isolated function createUserDefinedMessageSubscription(string accountSid, string callSid, CreateUserDefinedMessageSubscriptionRequest payload) returns CallUser_defined_message_subscription|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/UserDefinedMessageSubscriptions.json`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(payload);
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        CallUser_defined_message_subscription response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Delete a specific User Defined Message Subscription.
    #
    # + accountSid - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # + callSid - The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # + sid - The SID that uniquely identifies this User Defined Message Subscription.
    # + return - The resource was deleted successfully. 
    remote isolated function deleteUserDefinedMessageSubscription(string accountSid, string callSid, string sid) returns http:Response|error {
        string resourcePath = string `/2010-04-01/Accounts/${getEncodedUri(accountSid)}/Calls/${getEncodedUri(callSid)}/UserDefinedMessageSubscriptions/${getEncodedUri(sid)}.json`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
}
